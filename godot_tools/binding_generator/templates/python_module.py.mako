# Generated by PyGodot binding generator
<%!
    from godot_tools.binding_generator import escape_python, python_module_name, remove_nested_type_prefix

    DYNAMIC_PROPERTIES = True

    enum_values = set()

    def clean_value_name(value_name):
        enum_values.add(value_name)
        return remove_nested_type_prefix(value_name)

    def prop_getter(prop, class_def):
        getter = prop['getter']
        index = prop['index']

        if class_def['name'] == 'Node2D' and getter == 'get_global_transform':
            return 'CanvasItem.get_global_transform'
        elif class_def['name'] == 'Node2D' and getter == 'get_transform':
            return 'CanvasItem.get_transform'
        elif class_def['name'] in ('Slider', 'LineEdit') and getter == 'get_focus_mode':
            return 'Control.get_focus_mode'
        elif class_def['name'] == 'BitmapFont' and getter in ('get_ascent', 'is_distance_field_hint', 'get_height'):
            return 'Font.%s' % getter
        elif class_def['name'] in ('CurveTexture', 'GradientTexture', 'NoiseTexture') and getter == 'get_width':
            return 'Texture.get_width'
        elif class_def['name'] in ('DirectionalLight', 'OmniLight', 'SpotLight') and getter == 'get_param':
            return 'partialmethod(Light.%s, %d)' % (getter, index)
        elif class_def['name'] in ('InputEventAction', 'InputEventJoypadButton', 'InputEventKey', 'InputEventMouseButton', 'InputEventScreenTouch') and getter == 'is_pressed':
            return 'InputEvent.is_pressed'
        elif class_def['name'] == 'InputEventKey' and getter == 'is_echo':
            return 'InputEvent.is_echo'
        elif class_def['name'] == 'NoiseTexture' and getter == 'get_height':
            return 'Texture.get_height'

        if index >= 0:
            return 'partialmethod(%s.%s, %d)' % (class_def['name'].lstrip('_'), escape_python(getter), index)

        return '%s.%s' % (class_def['name'].lstrip('_'), escape_python(getter))

    def prop_setter(prop, class_def):
        setter = prop['setter']
        index = prop['index']

        if class_def['name'] in ('Slider', 'LineEdit') and setter == 'set_focus_mode':
            return 'Control.set_focus_mode'
        elif class_def['name'] in ('DirectionalLight', 'OmniLight', 'SpotLight') and setter == 'set_param':
            return 'partialmethod(Light.%s, %d)' % (setter, index)

        if not setter:
            return ''

        if index >= 0:
            return 'partialmethod(%s.%s, %d)' % (class_def['name'].lstrip('_'), escape_python(setter), index)

        return '%s.%s' % (class_def['name'].lstrip('_'), escape_python(setter))
%>
% if DYNAMIC_PROPERTIES:
from functools import partialmethod

% endif
from godot.bindings._python_bindings import (
% for class_name in class_names:
    ${class_name},
% endfor
)

__all__ = (
% for class_name in class_names:
    ${class_name},
% endfor
)

% for class_name, class_def, includes, forwards, methods in classes:
% if DYNAMIC_PROPERTIES and class_def['name'] not in ('RootMotionView',):  ## FIXME: Incomplete API, no methods defined
% for prop in class_def['properties']:
${class_name}.__add_property('${escape_python(prop['name'])}', ${prop_getter(prop, class_def)}, ${prop_setter(prop, class_def)})
% endfor

% endif
 % for enum in class_def['enums']:
    % for value_name, value in enum['values'].items():
${python_module_name(class_name).upper()}_${clean_value_name(value_name)} = ${value}
    % endfor

% endfor
% for name, value in ((k, v) for (k, v) in class_def['constants'].items() if k not in enum_values):
${python_module_name(class_name).upper()}_${name} = ${value}
% endfor
% endfor  ## classes
