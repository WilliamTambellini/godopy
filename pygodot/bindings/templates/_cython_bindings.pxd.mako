# Generated by PyGodot binding generator
<%!
    import re
    from pygodot.bindings._generator import python_module_name, remove_nested_type_prefix, CORE_TYPES, clean_signature

    enum_values = set()

    def clean_value_name(value_name):
        enum_values.add(value_name)
        return remove_nested_type_prefix(value_name)
%>
from godot_headers.gdnative_api cimport *
# Avoid c-importing "_Wrapped" and "Object"
from pygodot.bindings.cpp.core_types cimport real_t, ${', '.join(CORE_TYPES)}
from pygodot._core cimport _Wrapped


cdef struct __method_bindings:
% for class_name, class_def, includes, forwards, methods in classes:
    % for method_name, return_type, pxd_signature, signature, args, return_stmt in methods:
    godot_method_bind *__${class_name}__mb_${method_name}
    % endfor
% endfor

cdef __method_bindings __mb


# Declare C++ core type enums according to Cython binding conventions
cdef enum VariantType:
    VARIANT_NIL

    # Atomic types
    VARIANT_BOOL
    VARIANT_INT
    VARIANT_REAL
    VARIANT_STRING

    # Math types
    VARIANT_VECTOR2  # 5
    VARIANT_RECT2
    VARIANT_VECTOR3
    VARIANT_TRANSFORM2D
    VARIANT_PLANE
    VARIANT_QUAT  # 10
    VARIANT_RECT3
    VARIANT_BASIS
    VARIANT_TRANSFORM

    # Misc types
    VARIANT_COLOR
    VARIANT_NODE_PATH  # 15
    VARIANT__RID
    VARIANT_OBJECT
    VARIANT_DICTIONARY
    VARIANT_ARRAY

    # Arrays
    VARIANT_POOL_BYTE_ARRAY  # 20
    VARIANT_POOL_INT_ARRAY
    VARIANT_POOL_REAL_ARRAY
    VARIANT_POOL_STRING_ARRAY
    VARIANT_POOL_VECTOR2_ARRAY
    VARIANT_POOL_VECTOR3_ARRAY  # 25
    VARIANT_POOL_COLOR_ARRAY

    VARIANT_VARIANT_MAX


cdef enum VariantOperator:
    # Comparation
    VARIANT_OP_EQUAL
    VARIANT_OP_NOT_EQUAL
    VARIANT_OP_LESS
    VARIANT_OP_LESS_EQUAL
    VARIANT_OP_GREATER
    VARIANT_OP_GREATER_EQUAL

    # Mathematic
    VARIANT_OP_ADD
    VARIANT_OP_SUBSTRACT
    VARIANT_OP_MULTIPLY
    VARIANT_OP_DIVIDE
    VARIANT_OP_NEGATE
    VARIANT_OP_POSITIVE
    VARIANT_OP_MODULE
    VARIANT_OP_STRING_CONCAT

    # Bitwise
    VARIANT_OP_SHIFT_LEFT
    VARIANT_OP_SHIFT_RIGHT
    VARIANT_OP_BIT_AND
    VARIANT_OP_BIT_OR
    VARIANT_OP_BIT_XOR
    VARIANT_OP_BIT_NEGATE

    # Logic
    VARIANT_OP_AND
    VARIANT_OP_OR
    VARIANT_OP_XOR
    VARIANT_OP_NOT

    # Containment
    VARIANT_OP_IN
    VARIANT_OP_MAX


cdef enum Vector3Axis:
    VECTOR3_AXIS_X
    VECTOR3_AXIS_Y
    VECTOR3_AXIS_Z

% for class_name, class_def, includes, forwards, methods in classes:

cdef class ${class_name}(${class_def['base_class'] or '_Wrapped'}):
    % for method_name, return_type, pxd_signature, signature, args, return_stmt in methods:
    cdef ${return_type}${method_name}(self${', ' if pxd_signature else ''}${clean_signature(pxd_signature, class_name)})
    % endfor
    % if class_def['singleton']:

    @staticmethod
    cdef object get_singleton()

    % elif not class_def['enums'] and not class_def['constants'] and not methods:
        pass
    % endif

    % for enum in class_def['enums']:
cdef enum ${class_name}${enum['name'].lstrip('_')}:
        % for value_name, value in enum['values'].items():
    ${python_module_name(class_name).upper()}_${clean_value_name(value_name)} = ${value}
        % endfor

    % endfor
    % for name, value in ((k, v) for (k, v) in class_def['constants'].items() if k not in enum_values):
cdef int ${python_module_name(class_name).upper()}_${name} = ${value}

    % endfor
% endfor
