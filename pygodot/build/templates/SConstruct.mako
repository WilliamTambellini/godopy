#!python
<%!
import sys
%>
# Generated by PyGodot ${__version__}

import sys
import os

if not hasattr(sys, 'version_info') or sys.version_info < (3, 7):
    raise SystemExit("PyGodot requires Python version 3.7 or above.")

# Try to detect the host platform automatically.
# This is used if no `platform` argument is passed
if sys.platform.startswith('linux'):
    host_platform = 'linux'
elif sys.platform == 'darwin':
    host_platform = 'osx'
elif sys.platform == 'win32' or sys.platform == 'msys':
    host_platform = 'windows'
else:
    raise ValueError(
        'Could not detect platform automatically, please specify with '
        'platform=<platform>'
    )

opts = Variables([], ARGUMENTS)

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", host_platform, ['windows', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", host_platform, ['windows', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))

# Local dependency paths
godot_headers_path = ${repr(godot_headers_path)}
pygodot_bindings_path = ${repr(pygodot_bindings_path)}
pygodot_library = ${repr(pygodot_library_name)}

if sys.platform == 'win32':
    env = Environment(TARGET_ARCH='amd64')
else:
    env = DefaultEnvironment()

opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit()

if host_platform == 'osx':
    env.Append(LIBPATH=[os.path.join(pygodot_bindings_path, 'buildenv', 'lib', 'python3.8', 'config-3.8-darwin')])
    env.Append(CPPPATH=[os.path.join(pygodot_bindings_path, 'buildenv', 'include')])
elif host_platform == 'windows':
    env.Append(LIBPATH=[os.path.join(pygodot_bindings_path, 'deps', 'python', 'PCBuild', 'amd64')])
    env.Append(CPPPATH=[os.path.join(pygodot_bindings_path, 'deps', 'python', 'PC')])
    env.Append(CPPPATH=[os.path.join(pygodot_bindings_path, 'deps', 'python', 'include')])
else:
    env.Append(LIBPATH=[os.path.join(pygodot_bindings_path, 'buildenv', 'lib', 'python3.8')])
    env.Append(CPPPATH=[os.path.join(pygodot_bindings_path, 'buildenv', 'include')])

# Check our platform specifics
if env['platform'] == "osx":
    # Use Clang on macOS by default
    env['CXX'] = 'clang++'

    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-g', '-std=c++14', '-O2', '-arch', 'x86_64', '-fwrapv'])
        env.Append(LINKFLAGS=['-arch', 'x86_64'])
    else:
        env.Append(CCFLAGS=['-g', '-std=c++14', '-O3', '-arch', 'x86_64', '-fwrapv'])
        env.Append(LINKFLAGS=[
            '-arch', 'x86_64',
            '-framework', 'CoreFoundation',
        ])
    env.Append(LIBS=['dl'])
elif env['platform'] == 'linux':
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-fPIC', '-g3', '-Og'])
        env.Append(CXXFLAGS=['-std=c++17'])
    else:
        env.Append(CCFLAGS=['-fPIC', '-g', '-O3'])
        env.Append(CXXFLAGS=['-std=c++17'])

elif env['platform'] == 'windows':
    env.Append(CPPDEFINES=['WIN32', '_WIN32', '_WINDOWS', '_CRT_SECURE_NO_WARNINGS'])
    env.Append(CCFLAGS=['-W3', '-GR'])
    if env['target'] in ('debug', 'd'):
        env.Append(CPPDEFINES=['_DEBUG'])
        env.Append(CCFLAGS=['-EHsc', '-MDd', '-ZI'])
        env.Append(LINKFLAGS=['-DEBUG'])
    else:
        env.Append(CPPDEFINES=['NDEBUG'])
        env.Append(CCFLAGS=['-O2', '-EHsc', '-MD'])

binpath = os.path.dirname(sys.executable)
if sys.platform == 'win32':
    binpath = os.path.join(sys.prefix, 'Scripts')

env.Append(BUILDERS={
    'CythonSource': Builder(action='%s/cython --fast-fail -3 --cplus -o $TARGET $SOURCE' % binpath)
})

# make sure our binding library is properly includes
env.Append(CPPPATH=[
    godot_headers_path,
    pygodot_bindings_path,
    os.path.join(pygodot_bindings_path, 'include'),
    os.path.join(pygodot_bindings_path, 'include', 'core'),
    os.path.join(pygodot_bindings_path, 'include', 'gen'),
    os.path.join(pygodot_bindings_path, 'include', 'pycore'),
    os.path.join(pygodot_bindings_path, 'include', 'pygen')
])
env.Append(LIBPATH=[os.path.join(pygodot_bindings_path)])
% if sys.platform == 'win32':
env.Append(LIBS=[pygodot_library, 'python38'])
% else:
env.Append(LIBS=[pygodot_library, 'python3.8'])
% endif

% for varname, cpp, pyx in pyx_sources:
_gencpp_${varname} = env.CythonSource(${repr(cpp)}, ${repr(pyx)})
% endfor

sources = [
% for varname, _, _ in pyx_sources:
    _gencpp_${varname},
% endfor
% for src in cpp_sources:
    ${repr(src)},
% endfor
]

target_noext, ext = os.path.splitext(${repr(target)})
env['SHLIBSUFFIX'] = ext
env['SHLIBPREFIX'] = ''
library = env.SharedLibrary(target='${target}', source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
